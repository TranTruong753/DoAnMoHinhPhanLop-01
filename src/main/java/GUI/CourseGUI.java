/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BUS.CourseBUS;
import BUS.CourseInstructorBUS;
import BUS.DepartmentBUS;
import BUS.OnlineCourseBUS;
import BUS.OnsiteCourseBUS;
import BUS.ResultBUS;
import BUS.Course;
import BUS.OnlineCourse;
import BUS.OnsiteCourse;
import BUS.Department;
import java.awt.Dimension;
import java.sql.Time;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author M S I
 */
public class CourseGUI extends javax.swing.JFrame {

    private int SelectedIndexCombobox = 0;
    ArrayList<BUS.Department> listDepartment = new ArrayList<>();
    CourseBUS courseBUS = new CourseBUS();
    DepartmentBUS departmentBUS = new DepartmentBUS();
    OnlineCourseBUS onlineCourseBUS = new OnlineCourseBUS();
    ArrayList<Course> arrCourse = new ArrayList<>();
    OnsiteCourseBUS onsiteCourseBUS = new OnsiteCourseBUS();

    ResultBUS rsBUS = new ResultBUS();
    CourseInstructorBUS courseInstructorBUS = new CourseInstructorBUS();

    Course courseSelected = new Course();

    /**
     * Creates new form CourseGUI
     */
    public CourseGUI() {
        initComponents();

        loadComboboxDepartment();
        loadDataTable(courseBUS.getAll());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        onlineCourseForm = new javax.swing.JDialog();
        lbOnlineCourseID = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtOnlineCourseID = new javax.swing.JTextField();
        txtOnlineCourseCredits = new javax.swing.JTextField();
        txtOnlineCourseTitle = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUrl = new javax.swing.JTextField();
        cbOnlineDepartment = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnAddOnline = new javax.swing.JButton();
        btnEditOnline = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        onsiteCourseForm = new javax.swing.JDialog();
        txtOnsiteCourseID = new javax.swing.JTextField();
        txtOnsiteCourseCredits = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnAddOnsiteCourse = new javax.swing.JButton();
        btnEditOnsiteCourse = new javax.swing.JButton();
        btnCancelOnsiteForm = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtOnsiteCourseTitle = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtOnsiteCourseDays = new javax.swing.JTextField();
        lbOnsiteCourseID = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cbOnsiteCourseDepartment = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        txtOnsiteCourseLocation = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtOnsiteCourseTime = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        courseOptionDialog = new javax.swing.JDialog();
        cancelOpt = new javax.swing.JButton();
        onlineOpt = new javax.swing.JButton();
        onsiteOpt = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        comboboxSearch = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnRefresh = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseList = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnDetail = new javax.swing.JButton();

        onlineCourseForm.setLocationByPlatform(true);
        onlineCourseForm.setMinimumSize(new java.awt.Dimension(400, 488));
        onlineCourseForm.setResizable(false);

        lbOnlineCourseID.setText("Course ID");

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        jLabel2.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("KHÓA HỌC ONLINE");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jLabel6.setText("Department");

        jLabel5.setText("Credits");

        jLabel4.setText("Title");

        cbOnlineDepartment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("URL");

        btnAddOnline.setBackground(new java.awt.Color(0, 153, 153));
        btnAddOnline.setForeground(new java.awt.Color(255, 255, 255));
        btnAddOnline.setText("Thêm");
        btnAddOnline.setPreferredSize(new java.awt.Dimension(120, 40));
        btnAddOnline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOnlineActionPerformed(evt);
            }
        });
        jPanel3.add(btnAddOnline);

        btnEditOnline.setBackground(new java.awt.Color(255, 102, 51));
        btnEditOnline.setForeground(new java.awt.Color(255, 255, 255));
        btnEditOnline.setText("Sửa");
        btnEditOnline.setPreferredSize(new java.awt.Dimension(120, 40));
        btnEditOnline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditOnlineActionPerformed(evt);
            }
        });
        jPanel3.add(btnEditOnline);

        btnCancel.setBackground(new java.awt.Color(255, 0, 0));
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setText("Thoát");
        btnCancel.setPreferredSize(new java.awt.Dimension(120, 40));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel3.add(btnCancel);

        javax.swing.GroupLayout onlineCourseFormLayout = new javax.swing.GroupLayout(onlineCourseForm.getContentPane());
        onlineCourseForm.getContentPane().setLayout(onlineCourseFormLayout);
        onlineCourseFormLayout.setHorizontalGroup(
            onlineCourseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, onlineCourseFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(onlineCourseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbOnlineDepartment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtOnlineCourseID, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtOnlineCourseTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(txtOnlineCourseCredits, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(txtUrl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, onlineCourseFormLayout.createSequentialGroup()
                        .addGroup(onlineCourseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbOnlineCourseID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, onlineCourseFormLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        onlineCourseFormLayout.setVerticalGroup(
            onlineCourseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onlineCourseFormLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbOnlineCourseID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOnlineCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOnlineCourseTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOnlineCourseCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbOnlineDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        onsiteCourseForm.setMinimumSize(new java.awt.Dimension(400, 589));
        onsiteCourseForm.setResizable(false);

        btnAddOnsiteCourse.setBackground(new java.awt.Color(0, 153, 153));
        btnAddOnsiteCourse.setForeground(new java.awt.Color(255, 255, 255));
        btnAddOnsiteCourse.setText("Thêm");
        btnAddOnsiteCourse.setPreferredSize(new java.awt.Dimension(120, 40));
        btnAddOnsiteCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOnsiteCourseActionPerformed(evt);
            }
        });
        jPanel4.add(btnAddOnsiteCourse);

        btnEditOnsiteCourse.setBackground(new java.awt.Color(255, 102, 51));
        btnEditOnsiteCourse.setForeground(new java.awt.Color(255, 255, 255));
        btnEditOnsiteCourse.setText("Sửa");
        btnEditOnsiteCourse.setPreferredSize(new java.awt.Dimension(120, 40));
        btnEditOnsiteCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditOnsiteCourseActionPerformed(evt);
            }
        });
        jPanel4.add(btnEditOnsiteCourse);

        btnCancelOnsiteForm.setBackground(new java.awt.Color(255, 51, 51));
        btnCancelOnsiteForm.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelOnsiteForm.setText("Thoát");
        btnCancelOnsiteForm.setPreferredSize(new java.awt.Dimension(120, 40));
        btnCancelOnsiteForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelOnsiteFormActionPerformed(evt);
            }
        });
        jPanel4.add(btnCancelOnsiteForm);

        jLabel8.setText("Department");

        jLabel9.setText("Title");

        jPanel5.setBackground(new java.awt.Color(0, 153, 153));

        jLabel10.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("KHÓA HỌC ONSITE");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        lbOnsiteCourseID.setText("Course ID");

        jLabel12.setText("Days");

        cbOnsiteCourseDepartment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel13.setText("Credits");

        jLabel14.setText("Location");

        jLabel15.setText("Time");

        javax.swing.GroupLayout onsiteCourseFormLayout = new javax.swing.GroupLayout(onsiteCourseForm.getContentPane());
        onsiteCourseForm.getContentPane().setLayout(onsiteCourseFormLayout);
        onsiteCourseFormLayout.setHorizontalGroup(
            onsiteCourseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(onsiteCourseFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(onsiteCourseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbOnsiteCourseDepartment, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtOnsiteCourseID)
                    .addComponent(txtOnsiteCourseTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(txtOnsiteCourseCredits, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(txtOnsiteCourseDays, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(txtOnsiteCourseLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(txtOnsiteCourseTime, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(onsiteCourseFormLayout.createSequentialGroup()
                        .addGroup(onsiteCourseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbOnsiteCourseID)
                            .addComponent(jLabel9)
                            .addComponent(jLabel13)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(onsiteCourseFormLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        onsiteCourseFormLayout.setVerticalGroup(
            onsiteCourseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onsiteCourseFormLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbOnsiteCourseID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOnsiteCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOnsiteCourseTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOnsiteCourseCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbOnsiteCourseDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOnsiteCourseDays, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOnsiteCourseLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOnsiteCourseTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        courseOptionDialog.setMinimumSize(new java.awt.Dimension(497, 234));
        courseOptionDialog.setModal(true);
        courseOptionDialog.setResizable(false);

        cancelOpt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/cancel.png"))); // NOI18N
        cancelOpt.setText("Hủy");
        cancelOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOptActionPerformed(evt);
            }
        });

        onlineOpt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/OnlineCourse.png"))); // NOI18N
        onlineOpt.setText("Online");
        onlineOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineOptActionPerformed(evt);
            }
        });

        onsiteOpt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/OnsiteCourse.png"))); // NOI18N
        onsiteOpt.setText("Onsite");
        onsiteOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onsiteOptActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(0, 153, 153));

        jLabel16.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("THÊM KHÓA HỌC");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout courseOptionDialogLayout = new javax.swing.GroupLayout(courseOptionDialog.getContentPane());
        courseOptionDialog.getContentPane().setLayout(courseOptionDialogLayout);
        courseOptionDialogLayout.setHorizontalGroup(
            courseOptionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(courseOptionDialogLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(onlineOpt, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(onsiteOpt, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelOpt, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        courseOptionDialogLayout.setVerticalGroup(
            courseOptionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseOptionDialogLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(courseOptionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onlineOpt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(onsiteOpt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelOpt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(770, 562));
        setResizable(false);

        comboboxSearch.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        comboboxSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Theo mã", "Theo tên", "Số tín chỉ", "Phòng ban" }));
        comboboxSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboboxSearchItemStateChanged(evt);
            }
        });
        comboboxSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                comboboxSearchKeyReleased(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(0, 153, 153));
        btnAdd.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Add.png"))); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/12.png"))); // NOI18N
        btnRefresh.setText("Làm Mới");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Knowledge Sharing.png"))); // NOI18N
        jLabel1.setText("QUẢN LÝ KHÓA HỌC");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addContainerGap())
        );

        courseList.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        courseList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Title", "Credits", "Department", "Course Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseList.setRowHeight(35);
        courseList.setSelectionBackground(new java.awt.Color(0, 153, 153));
        courseList.setSelectionForeground(new java.awt.Color(255, 255, 255));
        courseList.getTableHeader().setReorderingAllowed(false);
        courseList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                courseListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(courseList);

        btnEdit.setBackground(new java.awt.Color(255, 153, 102));
        btnEdit.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Create.png"))); // NOI18N
        btnEdit.setText("Sửa");
        btnEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditMouseClicked(evt);
            }
        });
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/Delete Trash.png"))); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteMouseClicked(evt);
            }
        });
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnDetail.setBackground(new java.awt.Color(0, 102, 102));
        btnDetail.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        btnDetail.setForeground(new java.awt.Color(255, 255, 255));
        btnDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/View.png"))); // NOI18N
        btnDetail.setText("Chi Tiết");
        btnDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDetailMouseClicked(evt);
            }
        });
        btnDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 854, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(comboboxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefresh)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtSearch, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboboxSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDetail))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked
    }//GEN-LAST:event_btnAddMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        courseOptionDialog.setLocationRelativeTo(this);
        courseOptionDialog.setVisible(true);


    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditMouseClicked

    // xử lý sự kiện ấn nút sửa khóa học
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed

        //lấy ra dòng đc chọn trong danh sách khóa học
        int indexSelected = courseList.getSelectedRow();
        if (indexSelected == -1) {
            //hiện thông báo nếu chưa chọn 1 dòng trong bảng để sửa
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khóa học cần sửa");
        } else {

            //nếu mà là khóa học online thì nhảy dô if
            if (onlineCourseBUS.isCourseExists(courseSelected.getCourseID())) {
                //xử lý form
                btnAddOnline.setVisible(false);
                btnEditOnline.setVisible(true);
                txtOnlineCourseID.setVisible(true);
                txtOnlineCourseID.setEnabled(false);
                lbOnlineCourseID.setVisible(true);
                //xử lý khóa học online
                //load dữ liệu lên form
                loadFormCourseOnline(courseSelected);

                //  gọi form
                showDialog(onlineCourseForm);

            } else if (onsiteCourseBUS.isCourseExists(courseSelected.getCourseID())) {
                //xử lý form sửa onsiteCourse
                btnAddOnsiteCourse.setVisible(false);
                btnEditOnsiteCourse.setVisible(true);
                txtOnsiteCourseID.setEnabled(false);
                loadFormCourseOnsite(courseSelected);
                showDialog(onsiteCourseForm);
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseClicked

    }//GEN-LAST:event_btnDeleteMouseClicked

    // xử lý sự kiện ấn xóa sau khi đã ấn vào 1 dòng trên danh sách course
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //lấy ra dòng đc chọn trong danh sách khóa học
        int indexSelected = courseList.getSelectedRow();
        if (indexSelected == -1) {
            //hiện thông báo nếu chưa chọn 1 dòng trong bảng để sửa
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khóa học cần xóa");
        } else {
            //lấy khóa học đã chọn ra
            Course course = new Course();
            course.setCourseID(courseSelected.getCourseID());
            if (rsBUS.isCourseExists(course.getCourseID())
                    || courseInstructorBUS.isCourseExists(course.getCourseID())) {
                JOptionPane.showMessageDialog(this, "Không thể xóa dữ liệu");
            } else if (!rsBUS.isCourseExists(course.getCourseID())
                    && !courseInstructorBUS.isCourseExists(course.getCourseID())) {
                if (onlineCourseBUS.isCourseExists(course.getCourseID())) {
                    if (onlineCourseBUS.delete(course.getCourseID())) {
                        courseBUS.delete(course.getCourseID());
                        JOptionPane.showMessageDialog(this, "Xóa khóa học online thành công");
                        loadDataTable(arrCourse);
                    }
                } else {
                    if (onsiteCourseBUS.delete(course.getCourseID())) {
                        courseBUS.delete(course.getCourseID());
                        JOptionPane.showMessageDialog(this, "Xóa khóa học onsite thành công");
                        loadDataTable(arrCourse);
                    }

                }
            }

        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    public void setOnlineCourseModel(Course course) {
        OnlineCourse onlineCourse = onlineCourseBUS.getByID(course.getCourseID());
        txtOnlineCourseID.setText(course.getCourseID() + "");
        txtOnlineCourseTitle.setText(course.getTitle());
        txtOnlineCourseCredits.setText(course.getCredits() + "");
        int indexComboboxDepartment = 0;
        for (Department a : listDepartment) {
            indexComboboxDepartment++;
            if (a.getDepartmentID() == course.getDepartmentID()) {
                break;
            }
        }
        cbOnlineDepartment.setSelectedIndex(indexComboboxDepartment);
        txtUrl.setText(onlineCourse.getUrl());

    }

    // xử lý sự kiện ấn vào 1 dòng trên bảng khóa học
    private void courseListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseListMouseClicked
        // lấy ra số dòng được chọn
        int row = courseList.rowAtPoint(evt.getPoint());
        // lấy ra id khóa học từ dòng được chọn
        int courseID = Integer.parseInt(courseList.getValueAt(row, 0).toString());
        // Lấy được khóa học từ id của khóa học đó
        courseSelected = courseBUS.getByID(courseID);


    }//GEN-LAST:event_courseListMouseClicked

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed

    }//GEN-LAST:event_txtSearchActionPerformed

    // Xử lý khi ấn từ khóa vào khung tìm kiếm
    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String key = this.txtSearch.getText().trim();
        if (key == "") {
            loadDataTable(courseBUS.getAll());
        } else {
            loadDataTable(courseBUS.findCourse(key, SelectedIndexCombobox));
        }

    }//GEN-LAST:event_txtSearchKeyReleased

    private void comboboxSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboboxSearchKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_comboboxSearchKeyReleased

    private void comboboxSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboboxSearchItemStateChanged
        this.SelectedIndexCombobox = this.comboboxSearch.getSelectedIndex();
    }//GEN-LAST:event_comboboxSearchItemStateChanged

    // Xử lý sự kiên nút làm mới danh sách khóa học
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.txtSearch.setText("");
        loadDataTable(courseBUS.getAll());
    }//GEN-LAST:event_btnRefreshActionPerformed

    // xử lý sự kiện khi ấn hủy lựa chọn thêm khóa học
    private void cancelOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOptActionPerformed
        // TODO add your handling code here:
        courseOptionDialog.setVisible(false);
    }//GEN-LAST:event_cancelOptActionPerformed

    // xử lý khi click vào lựa chọn thêm khóa học online
    private void onlineOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineOptActionPerformed
        lbOnlineCourseID.setVisible(true);
        txtOnlineCourseID.setVisible(true);
        txtOnlineCourseID.setEnabled(false);
        btnAddOnline.setVisible(true);
        btnEditOnline.setVisible(false);
        resetOnlineCourseForm();
        showDialog(onlineCourseForm);


    }//GEN-LAST:event_onlineOptActionPerformed

    // xử lý sự kiện khi ấn lựa chọn thêm khóa học onsite
    private void onsiteOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onsiteOptActionPerformed
        txtOnsiteCourseID.setEnabled(false);
        btnAddOnsiteCourse.setVisible(true);
        btnEditOnsiteCourse.setVisible(false);
        resetForm();
        showDialog(onsiteCourseForm);
    }//GEN-LAST:event_onsiteOptActionPerformed

    private void btnDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDetailMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDetailMouseClicked

    // xử lý sự kiện xem chi tiết 1 dòng khóa học
    private void btnDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailActionPerformed

        //lấy ra dòng đc chọn trong danh sách khóa học
        int indexSelected = courseList.getSelectedRow();
        if (indexSelected == -1) {
            //hiện thông báo nếu chưa chọn 1 dòng trong bảng để sửa
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khóa học cần xem chi tiết");
        } else {

            //nếu mà là khóa học online thì nhảy dô if
            if (onlineCourseBUS.isCourseExists(courseSelected.getCourseID())) {
                //xử lý form
                btnAddOnline.setVisible(false);
                btnEditOnline.setVisible(false);
                txtOnlineCourseID.setVisible(true);
                txtOnlineCourseID.setEnabled(false);
                lbOnlineCourseID.setVisible(true);
                //xử lý khóa học online
                //load dữ liệu lên form
                loadFormCourseOnline(courseSelected);

                //  gọi form
                showDialog(onlineCourseForm);

            } else if (onsiteCourseBUS.isCourseExists(courseSelected.getCourseID())) {
                btnAddOnsiteCourse.setVisible(false);
                btnEditOnsiteCourse.setVisible(false);
                loadFormCourseOnsite(courseSelected);

                showDialog(onsiteCourseForm);
            }
        }
    }//GEN-LAST:event_btnDetailActionPerformed

    // xử lý sự kiện khi ấn nút thoát --->  reset lại dữ liệu trong form online
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:\
        onlineCourseForm.setVisible(false);
        resetOnlineCourseForm();
    }//GEN-LAST:event_btnCancelActionPerformed

    // Xử lý sự kiện ấn thêm khóa học online 
    private void btnAddOnlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOnlineActionPerformed
        //lấy dữ liệu từ form
        String title = this.txtOnlineCourseTitle.getText().trim();
        String creditsStr = this.txtOnlineCourseCredits.getText().trim();
        int department = cbOnlineDepartment.getSelectedIndex();
        String url = this.txtUrl.getText().trim();

        // kiểm tra đầu vào các trường dữ liệu
        if (checkInputCourseOnline(title, creditsStr, department, url)) {
            //đổi credits từ chuỗi sang số nguyên
            int credits = Integer.parseInt(creditsStr);
            //tạo 1 đối tượng Course và truyền dữ liệu vào
            Course course = new Course(title, credits, listDepartment.get(department - 1).getDepartmentID());
            //đẩy dữ liệu xuống
            courseBUS.insert(course);
            //tạo 1 đối tượng onlineCourse và truyền dữ liệu vào
            OnlineCourse onlineCourse = new OnlineCourse(courseBUS.getLastId(), url);
            //đẩy dữ liệu xuống database 
            onlineCourseBUS.insert(onlineCourse);
            JOptionPane.showMessageDialog(rootPane,
                    "Thêm 1 khóa học online thành công!");
            onlineCourseForm.dispose();
            courseOptionDialog.dispose();
            //load lại bảng
            loadDataTable(courseBUS.getAll());
        }

    }//GEN-LAST:event_btnAddOnlineActionPerformed

    // hàm reset form
    public void resetForm() {
        //Làm trống txt form online
        this.txtOnlineCourseID.setText("");
        this.txtOnlineCourseCredits.setText("");
        this.txtOnlineCourseTitle.setText("");
        this.cbOnlineDepartment.setSelectedIndex(0);
        this.txtUrl.setText("");

        //Làm trống txt form onsite
        this.txtOnsiteCourseID.setText("");
        this.txtOnsiteCourseCredits.setText("");
        this.txtOnsiteCourseDays.setText("");
        this.txtOnsiteCourseLocation.setText("");
        this.txtOnsiteCourseTime.setText("");
        this.txtOnsiteCourseTitle.setText("");
        this.cbOnsiteCourseDepartment.setSelectedIndex(0);

    }

    // xử lý sự kiện khi ấn sửa khóa học online
    private void btnEditOnlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditOnlineActionPerformed
        //lấy dữ liệu từ form
        int id = Integer.parseInt(this.txtOnlineCourseID.getText().trim());
        String title = this.txtOnlineCourseTitle.getText().trim();
        String creditsStr = this.txtOnlineCourseCredits.getText().trim();
        int department = cbOnlineDepartment.getSelectedIndex();
        String url = this.txtUrl.getText().trim();

        if (checkInputCourseOnline(title, creditsStr, department, url)) {
            //đổi credits từ chuỗi sang số nguyên
            int credits = Integer.parseInt(creditsStr);
            Course course = new Course(id, title, credits, listDepartment.get(department - 1).getDepartmentID());
            //đẩy dữ liệu mới sửa xuống database 
            courseBUS.update(course);
            OnlineCourse onlineCourse = new OnlineCourse(id, url);
            //đẩy dữ liệu mới sửa xuống database 
            onlineCourseBUS.update(onlineCourse);
            JOptionPane.showMessageDialog(rootPane, "Sửa 1 khóa học online thành công!");
            onlineCourseForm.dispose();
            courseOptionDialog.dispose();
            //load lại bảng
            loadDataTable(courseBUS.getAll());
        }

    }//GEN-LAST:event_btnEditOnlineActionPerformed

    // hàm xử lý khi ấn thêm khóa học onsite
    private void btnAddOnsiteCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOnsiteCourseActionPerformed
        String title = this.txtOnsiteCourseTitle.getText().trim();
        String creditsStr = this.txtOnsiteCourseCredits.getText().trim();
        int department = cbOnsiteCourseDepartment.getSelectedIndex();
        String location = txtOnsiteCourseLocation.getText();
        String days = txtOnsiteCourseDays.getText();
        String time = txtOnsiteCourseTime.getText();
        if (checkInputCourseOnsite(title, creditsStr, department, days, location, time)) {
            //đổi credits từ chuỗi sang số nguyên
            int credits = Integer.parseInt(creditsStr);
            //tạo 1 đối tượng Course và truyền dữ liệu vào
            Course course = new Course(title, credits, listDepartment.get(department - 1).getDepartmentID());
            //đẩy dữ liệu xuống
            courseBUS.insert(course);
            //tạo 1 đối tượng onsiteCourse và truyền dữ liệu vào
            OnsiteCourse onsiteCourse = new OnsiteCourse(courseBUS.getLastId(), days, location, time);
            //đẩy dữ liệu xuống database 
            onsiteCourseBUS.insert(onsiteCourse);
            JOptionPane.showMessageDialog(rootPane,
                    "Thêm 1 khóa học onsite thành công!");
            onsiteCourseForm.dispose();
            courseOptionDialog.dispose();

            //load lại bảng
            loadDataTable(courseBUS.getAll());
        }
    }//GEN-LAST:event_btnAddOnsiteCourseActionPerformed

    // hàm xử lý khi ấn nút thoát form onsite
    private void btnCancelOnsiteFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelOnsiteFormActionPerformed
        // TODO add your handling code here:
        onsiteCourseForm.setVisible(false);
        resetForm();
    }//GEN-LAST:event_btnCancelOnsiteFormActionPerformed

    private void btnEditOnsiteCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditOnsiteCourseActionPerformed
        //lấy dữ liệu từ form
        int id = Integer.parseInt(this.txtOnsiteCourseID.getText().trim());
        String title = this.txtOnsiteCourseTitle.getText().trim();
        String creditsStr = this.txtOnsiteCourseCredits.getText().trim();
        int department = cbOnsiteCourseDepartment.getSelectedIndex();
        String location = txtOnsiteCourseLocation.getText();
        String days = txtOnsiteCourseDays.getText();
        String time = txtOnsiteCourseTime.getText();
        if (checkInputCourseOnsite(title, creditsStr, department, days, location, time)) {
            //đổi credits từ chuỗi sang số nguyên
            int credits = Integer.parseInt(creditsStr);
            Course course = new Course(id, title, credits, listDepartment.get(department - 1).getDepartmentID());
            //đẩy dữ liệu mới sửa xuống database 
            courseBUS.update(course);
            OnsiteCourse onsiteCourse = new OnsiteCourse(id, days, location, time);
            //đẩy dữ liệu mới sửa xuống database 
            onsiteCourseBUS.update(onsiteCourse);
            JOptionPane.showMessageDialog(rootPane, "Sửa 1 khóa học onsite thành công!");
            onsiteCourseForm.dispose();
            courseOptionDialog.dispose();
            //load lại bảng
            loadDataTable(courseBUS.getAll());
        }


    }//GEN-LAST:event_btnEditOnsiteCourseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CourseGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    public javax.swing.JButton btnAddOnline;
    public javax.swing.JButton btnAddOnsiteCourse;
    public javax.swing.JButton btnCancel;
    public javax.swing.JButton btnCancelOnsiteForm;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDetail;
    private javax.swing.JButton btnEdit;
    public javax.swing.JButton btnEditOnline;
    public javax.swing.JButton btnEditOnsiteCourse;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton cancelOpt;
    private javax.swing.JComboBox<String> cbOnlineDepartment;
    private javax.swing.JComboBox<String> cbOnsiteCourseDepartment;
    private javax.swing.JComboBox<String> comboboxSearch;
    private javax.swing.JTable courseList;
    private javax.swing.JDialog courseOptionDialog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbOnlineCourseID;
    private javax.swing.JLabel lbOnsiteCourseID;
    private javax.swing.JDialog onlineCourseForm;
    private javax.swing.JButton onlineOpt;
    private javax.swing.JDialog onsiteCourseForm;
    private javax.swing.JButton onsiteOpt;
    private javax.swing.JTextField txtOnlineCourseCredits;
    private javax.swing.JTextField txtOnlineCourseID;
    private javax.swing.JTextField txtOnlineCourseTitle;
    private javax.swing.JTextField txtOnsiteCourseCredits;
    private javax.swing.JTextField txtOnsiteCourseDays;
    private javax.swing.JTextField txtOnsiteCourseID;
    private javax.swing.JTextField txtOnsiteCourseLocation;
    private javax.swing.JTextField txtOnsiteCourseTime;
    private javax.swing.JTextField txtOnsiteCourseTitle;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUrl;
    // End of variables declaration//GEN-END:variables

    private void loadDataTable(ArrayList<Course> list) {
        DefaultTableModel model = (DefaultTableModel) courseList.getModel();
        model.setRowCount(0); // xóa table 

        for (Course course : list) {

            Object[] dataRow = new Object[5];
            dataRow[0] = course.getCourseID();
            dataRow[1] = course.getTitle();
            dataRow[2] = course.getCredits();
            dataRow[3] = departmentBUS.getByID(course.getDepartmentID()).getName();
            if (onlineCourseBUS.isCourseExists(course.getCourseID())) {
                dataRow[4] = "Online";
                model.addRow(dataRow);
            } else if (onsiteCourseBUS.isCourseExists(course.getCourseID())) {
                dataRow[4] = "Onsite";
                model.addRow(dataRow);
            }
            arrCourse = list;
        }
    }

    // hàm để hiển thị các dialog
    public void showDialog(JDialog dialog) {
        dialog.setModal(true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    // đẩy dữ liệu của 1 khóa học vào form (cái này để sử dụng khi ấn vào 1 dòng trên bảng Course thì dũ liệu sẽ đẩy vào form)
    // nếu course online thì đẩy vô course online và ngược lại
    // và trường hợp xóa thì đẩy dữ liệu vào khi ấn vào bảng để lấy cái mã course để xóa
    public void setCourseModel(Course course) {
        if (onlineCourseBUS.isCourseExists(course.getCourseID())) {
            OnlineCourse onlineCourse = onlineCourseBUS.getByID(course.getCourseID());
            txtOnlineCourseTitle.setText(course.getTitle() + "");
            txtOnlineCourseCredits.setText(course.getCredits() + "");
            // ở đây thiếu cái dữ liệu phòng ban
            // t làm xóa nên chỉ cần mã thôi nên phần tiếp theo tự ghi vào
        } else {
            this.txtOnsiteCourseID.setText(course.getCourseID() + "");
        }
    }

    // hàm reset form online course
    public void resetOnlineCourseForm() {
        txtOnlineCourseID.setText("");
        txtOnlineCourseTitle.setText("");
        txtOnlineCourseCredits.setText("");
        cbOnlineDepartment.setSelectedIndex(0);
        txtUrl.setText("");

    }

    // hàm truyền danh sách tên phòng ban vào combobox
    private void loadComboboxDepartment() {
        listDepartment = departmentBUS.getAll();
        cbOnlineDepartment.removeAllItems();
        cbOnsiteCourseDepartment.removeAllItems();
        cbOnlineDepartment.addItem("Chưa chọn");
        cbOnsiteCourseDepartment.addItem("Chưa chọn");
        for (Department o : listDepartment) {
            this.cbOnlineDepartment.addItem(o.getName());
            this.cbOnsiteCourseDepartment.addItem(o.getName());
        }

    }

    //hàm check dữ liệu đầu vào khi thêm khóa học online
    public boolean checkInputCourseOnline(String title, String credits, int department, String url) {
        boolean check = false;
        String errStr = "Lỗi:";
//        check lỗi
        if (!title.isEmpty() && !credits.isEmpty() && department > 0 && !url.isEmpty()
                && checkError.check.is_integer_number_and_greater_than_0(credits)) {
            check = true;
        } else {

            //cộng chuỗi các lỗi
            if (title.isEmpty()) {
                errStr += "\n- Tên môn học không được để trống ";
            }
            if (credits.isEmpty()) {
                errStr += "\n- Số tín chỉ không được để trống";
            }
            if (!checkError.check.is_integer_number_and_greater_than_0(credits)) {
                errStr += "\n- Số tín chỉ là 1 số nguyên lớn hơn 0";
            }
            if (department <= 0) {
                errStr += "\n- Vui lòng chọn phòng ban";
            }
            if (url.isEmpty()) {
                errStr += "\n- Link khóa học không được để trống";
            }
            JOptionPane.showMessageDialog(rootPane, errStr);
        }

        return check;

    }

    //hàm check dữ liệu đầu vào khi thêm khóa học onsite
    public boolean checkInputCourseOnsite(String title, String credits, int department, String days, String location, String time) {
        boolean check = false;
        String errStr = "Lỗi:";
//        check lỗi
        if (!title.isEmpty() && !credits.isEmpty() && department > 0
                && checkError.check.is_integer_number_and_greater_than_0(credits) && !days.isEmpty() && !location.isEmpty() && !time.isEmpty()
                && checkError.check.check_time_format(time)) {
            check = true;
        } else {

            //cộng chuỗi các lỗi
            if (title.isEmpty()) {
                errStr += "\n- Tên môn học không được để trống ";
            }
            if (credits.isEmpty()) {
                errStr += "\n- Số tín chỉ không được để trống";
            }
            if (!checkError.check.is_integer_number_and_greater_than_0(credits)) {
                errStr += "\n- Số tín chỉ là 1 số nguyên lớn hơn 0";
            }
            if (department <= 0) {
                errStr += "\n- Vui lòng chọn Department";
            }
            if (days.isEmpty()) {
                errStr += "\n- Ngày học không được để trống";
            }
            if (location.isEmpty()) {
                errStr += "\n- Địa điểm không được để trống";
            }

            if (time.isEmpty()) {
                errStr += "\n- Thời gian học không được để trống";
            }

            if (!checkError.check.check_time_format(time)) {
                errStr += "\n- Thời gian học phải theo đúng định dạng hh:mm:ss VD: (00:00:00)";
            }
            JOptionPane.showMessageDialog(rootPane, errStr);
        }

        return check;

    }

    // hàm truyền dữ liệu khóa học online lên form
    private void loadFormCourseOnline(Course c) {

        // load dữ liệu từ bảng lên form onlinecourse
        this.txtOnlineCourseID.setText(c.getCourseID() + "");
        this.txtOnlineCourseTitle.setText(c.getTitle());
        this.txtOnlineCourseCredits.setText(c.getCredits() + "");
        OnlineCourse onlineCourse = onlineCourseBUS.getByID(c.getCourseID());
        this.txtUrl.setText(onlineCourse.getUrl());
        int indexComboboxDepartment = 0;
        for (Department a : listDepartment) {
            indexComboboxDepartment++;
            if (a.getDepartmentID() == c.getDepartmentID()) {
                break;
            }
        }
        cbOnlineDepartment.setSelectedIndex(indexComboboxDepartment);
    }

    // hàm truyền dữ liệu khóa học onsite lên form
    private void loadFormCourseOnsite(Course c) {

        this.txtOnsiteCourseID.setText(c.getCourseID() + "");
        this.txtOnsiteCourseTitle.setText(c.getTitle());
        this.txtOnsiteCourseCredits.setText(c.getCredits() + "");
        OnsiteCourse onsiteCourse = onsiteCourseBUS.getByID(c.getCourseID());
        this.txtOnsiteCourseDays.setText(onsiteCourse.getDays());
        this.txtOnsiteCourseLocation.setText(onsiteCourse.getLocation());
        this.txtOnsiteCourseTime.setText(onsiteCourse.getTime());
        int indexComboboxDepartment = 0;
        for (Department a : listDepartment) {
            indexComboboxDepartment++;
            if (a.getDepartmentID() == c.getDepartmentID()) {
                break;
            }
        }
        cbOnsiteCourseDepartment.setSelectedIndex(indexComboboxDepartment);
    }
}
